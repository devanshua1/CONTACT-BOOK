{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs36\lang9 Project Description \par
\fs28 1. Aim of the Project\fs22 :\par
This project is devloped using the general requirement by the user while using the Directory book  and provided a lot of facility to their user .The objective of my project\par
contacts is to record the details of varies information of the user.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Fast speed data processing.\par
{\pntext\f1\'B7\tab}To record the details of various information of user.\par
{\pntext\f1\'B7\tab}It will simplify the task and reduse the paperwork.\par
{\pntext\f1\'B7\tab}This project is very user friendly.\par
{\pntext\f1\'B7\tab}Easily accessed by administrators,academic,student,andapplicants.\par

\pard\sa200\sl276\slmult1   \fs32 2. Business Problem or Problem Statement:\par
\fs22 Businesses can face a number of problems when it comes to maintaining contact details, including: \par
Inaccurate or outdated information\par
Contact information can become outdated due to people moving, changing jobs, or passing away. This can lead to wasted time and money when trying to communicate with the wrong person. \par
Contacts spread across multiple databases\par
Without proper planning, contacts can end up in multiple email accounts and other databases. This can make it difficult to find the right information. \par
Contacts lost when employees leave\par
When employees move on, they often take their contacts with them. \par
Difficulty connecting with people\par
Inaccurate or outdated information can make it difficult to connect with people. \par
To maintain contact details, businesses can: \par
Implement a data validation process: This can help identify and correct inaccuracies. \par
Conduct regular audits and updates: This can help keep information current and relevant. \par
This can help save contact information and send reminders to check in. \par
\par
 \fs32 3. Project Description: \par
\fs22 This project based on contact list book. It keeps the all the contacts saved in the list,\par
personal as well as business-related.This contacts  project was devloped by using Python programming lanuage.\par
The main benifit of this contact list book is that a person can replace hard book what is use for writing the contacts by using this project. By this project user can easily save in cotacts are "NAME","AGE","EMAIL" and,"MOBILE NUMBER" access by:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 1. create contact\par
{\pntext\f1\'B7\tab}2. view contact\par
{\pntext\f1\'B7\tab}3. update contact\par
{\pntext\f1\'B7\tab}4. delete contact\par
{\pntext\f1\'B7\tab}5. search contact\par
{\pntext\f1\'B7\tab}6. total no of contacts\par
{\pntext\f1\'B7\tab}7. exit\par

\pard\sa200\sl276\slmult1\fs32 4. Functionalities:   \par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs22  \fs28 1. create contact:\par

\pard\sa200\sl276\slmult1               \fs22 The purpose of creating a contact list is to organize and store contact information in a centralized place, making it easier to communicate with people. Contact lists can be used for a variety of purposes, including: \par
Sending emails\par
A contact list can be used to send an email to a group of people by adding the list to the "To" line of an email. \par
Creating targeted subgroups\par
Contact lists can be used to create targeted subgroups of a database, which can be used for a variety of purposes, such as building subscription-management controls or reporting on email results. \par
Streamlining communication\par
Contact lists can make communication more efficient by removing the need to remember individual phone numbers or email addresses. \par
Including in other contact lists \par
Contact lists can include a variety of contact information, such as names, addresses, phone numbers, and email addresses. \par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 2. view contact:\par

\pard\sa200\sl276\slmult1            \fs22 Views contact can be useful for managing contact lists in various ways, including:\par
Filtering:\par
Views can filter records based on property values, allowing you to limit the records you see. For example, you can create a view to show only completed contacts.\par
Quick checks:\par
You can create views on the spot to quickly check a specific data set or group.\par
Saving:\par
You can save views to come back to and review continuously.\par
   \par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 3. update contact:\par

\pard\sa200\sl276\slmult1              \fs24 Keeping business contacts organized and updated is essential for the success of any business. Not only does it increase productivity, improve communication, lead to new opportunities, and better decision-making, but it also prevents the significant costs of lost contacts.\par
If you don't update your contact information, you might miss out on important reminders and time-sensitive prompts. \par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 4. delete contact:\par

\pard\sa200\sl276\slmult1              \fs24 Ultimately, the decision to delete  contact depends on your bussinuss need and circumstances. If you believe that having that contact could hinder your bussinuss to growth, it might be beneficial to delete it. Conversely, if you think you might need to communicate with them in the future, you may choose to keep it for now. Trust your instincts and prioritize what would be the best for your bussinus growth.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 5. search contact:\par

\pard\sa200\sl276\slmult1        \fs22  A search contact list can help your business in several ways, including: \par
when you have more number of contacts:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 6. total no of contacts:\par

\pard\sa200\sl276\slmult1             \fs24 It help the user to know how many contacts he has\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 7. exit:\fs24\par

\pard\sa200\sl276\slmult1        This is the function of project in which user have option to exist from that programme while loop.\par
\fs32 5. Input Versatility with Error Handling and Exception Handling: \fs22\par
\fs32    \fs24 Exception handling is the process of responding to unexpected events that can occur while a computer program is running. Error handling, on the other hand, helps maintain the normal flow of a program's execution. \par
Exception handling is useful for dealing with exceptions that cannot be handled locally. Instead of showing an error status in the program, the exception handler transfers control to where the error can be handled. A function can throw exceptions or can choose to handle exceptions.\par
\fs28 here exception in this project I give else condition to handel exception when will error or invalid or not exist it will print else condition.\par
6. Code Implementation: \fs24\par
To implement the project, we utilize basic Python programming concepts to create a modular \par
and maintainable codebase. We leverage key algorithms and data structures to efficiently \par
manage data processing tasks. The code is organized into modules to ensure modularity and \par
readability, with extensive documentation provided for clarity and future development. \par
\fs28 Description: \par
\fs24 In this project, we implement various modules using basic Python programming concepts. \par
Each module is designed to handle specific functionalities of the contacts list. \par
For example, let's consider the implementation of a contacts module:\par
\par
\par
contacts=\{\}                                    # Created empty dictonary to store user detail.\par
while True:                                     # While loop for selecting choice.\par
    print("\\n CONTACT LIST BOOK")             \par
    print("1. create contact")\par
    print("2. view contact")\par
    print("3. update contact")                   # To ask from user to select from sevan option.\par
    print("4. delete contact")\par
    print("5. search contact")\par
    print("6. total no of contacts")\par
    print("7. exit")\par
\par
\par
    choice=input("enter your choice:")            # Ask user to select choice in string format.\par
\par
    if choice =="1":                                          # To create contacts in dictionary contacts.   \par
        name=input("NAME:")\par
        if name in contacts:                                 # If name already exist then print this statement. \par
            print(f"contact name \{name\} already exists")\par
        else:                                                # If not then else condition to create contact.   \par
            age=input("age:")\par
            email=input("email:")\par
            mobile=input("mobile no.:")\par
            contacts[name]=\{"age":int(age),"email":email,"mobile no.":mobile\}\par
            print(f"contact name \{name\} successfully created")\par
\par
    elif choice == "2":                                     # To view all cotact store in dictonary contacts .\par
        name=input("contact name to view:")                 # if name exist in cotact list show else that contact not exist.\par
        if name in contacts:\par
            cotacts=contacts[name]\par
            print(f"name:\{name\},age:\{age\},email:\{email\},mobile no:\{mobile\}")\par
        else:\par
            print("contact name does not exist in contact list book ")\par
    elif choice=="3":                                               # To update contact detail. \par
        name =input("enter contact name to update detail:")\par
        if name  in contacts:\par
            age=input(" updated age:")                             # if contact name exist in dictonary contacts it will updated. \par
            email=input("updated email:")                          \par
            mobile=input("updated mobile no.:")\par
            contacts[name]=\{"updated age":int(age),"email":email,"mobile no.":mobile\}\par
            print(f"contact name \{name\} successfully updated")\par
        else:                                                       # # else it will print does not exist.\par
            print("contact name does not exist in contact list book")\par
    elif choice == "4":                                              # To delete contact exist in dictonary contacts.\par
        name=input("enter contact name to delete:")                  # if name exist in contacts dictonary then it will be deleted. \par
        if name in contacts:                                         \par
            del contacts[name]\par
            print(f"contacts name \{name\} has been deleted successfully")\par
        else:                                                         # # else that contact name does not exist.\par
            print("contact name does not exist in contact list book")\par
         \par
\par
    elif choice=="5":                                                # To search contact in contacts.\par
        search_name=input("enter cotacts name to search")\par
        found=False\par
        for name,contact in contacts.items():                        # name,contact in contacts. if found true then print that\par
            if search_name.lower() in name.lower():\par
                print(f"Found -name:\{name\},age:\{age\},mobile no:\{mobile\},email:\{email\}")\par
                found=True\par
        if not found:                                                   # if not found true then print no contact found with that name.\par
            print("no contact found with that name")\par
    elif choice=="6":                                                    # To find no of total contact by len. \par
        print(f"total contacts in your contact book:\{len(contacts)\}")\par
    elif choice=="7":                                                    # To close the programe \par
        print("closing the programe") \par
        break                                                             # break the while loop here.\par
    else:                                                                 # if input neither one of all sevan choice the else to print invalid input\par
        print("invalid input! please select from avove sevan option(1-7)")\par
\par
\par
In this code snippet, we define a dictonary of contacts to store all contact of user with other detail.\par
such as  CONTACT LIST BOOK          \par
    1. create contact\par
    2. view contact\par
    3. update contact                \par
    4. delete contact\par
    5. search contact\par
    6. total no of contacts\par
    7. exit\par
list of contacts, allowing us to add contact and display their information. \par
By organizing our code in this manner, we ensure clarity, maintainability, and ease of future \par
enhancements or modifications.\par
\par
\fs28 7. Results and Outcomes: \fs24\par
Through the project implementation, we achieved a significant reduction in administrative \par
workload and improved communication between stakeholders. The contacts streamlined processes, enhanced data accuracy, and provided valuable insights for \par
decision-making, resulting in improved efficiency and effectiveness in bussinuss operations. \par
\fs28 8. Conclusion: \par
\fs24 In conclusion, our contacts list offers a comprehensive solution to address the \par
administrative challenges faced to manage contacts. With its user-friendly interface, \par
robust features, and scalability, the system has the potential to revolutionize comunication with their stackholder.\par
management practices and contribute to the overall success of bussinuss. \par
developments may include additional modules for finance their Addresses \par
analysis, and integration with analysis managment system.\par
 \par
\fs22\par
}
 